// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const createAuthenticationData = `-- name: CreateAuthenticationData :one
INSERT INTO authenticationData(uuid, hashedPassword, salt)
VALUES(?, ?, ?)
RETURNING uuid, hashedpassword, salt
`

type CreateAuthenticationDataParams struct {
	Uuid           string
	Hashedpassword string
	Salt           string
}

func (q *Queries) CreateAuthenticationData(ctx context.Context, arg CreateAuthenticationDataParams) (AuthenticationDatum, error) {
	row := q.db.QueryRowContext(ctx, createAuthenticationData, arg.Uuid, arg.Hashedpassword, arg.Salt)
	var i AuthenticationDatum
	err := row.Scan(&i.Uuid, &i.Hashedpassword, &i.Salt)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (uuid, username)
VALUES(?, ?)
RETURNING uuid, username
`

type CreateUserParams struct {
	Uuid     string
	Username string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Uuid, arg.Username)
	var i User
	err := row.Scan(&i.Uuid, &i.Username)
	return i, err
}

const deleteAuthData = `-- name: DeleteAuthData :exec
DELETE FROM authenticationData
WHERE uuid = ?
`

func (q *Queries) DeleteAuthData(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthData, uuid)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE uuid = ?
`

func (q *Queries) DeleteUser(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, uuid)
	return err
}

const getAuthData = `-- name: GetAuthData :one
SELECT uuid, hashedpassword, salt FROM authenticationData
WHERE uuid = ? 
LIMIT 1
`

func (q *Queries) GetAuthData(ctx context.Context, uuid string) (AuthenticationDatum, error) {
	row := q.db.QueryRowContext(ctx, getAuthData, uuid)
	var i AuthenticationDatum
	err := row.Scan(&i.Uuid, &i.Hashedpassword, &i.Salt)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT uuid, username FROM users
WHERE uuid = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, uuid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uuid)
	var i User
	err := row.Scan(&i.Uuid, &i.Username)
	return i, err
}

const updateAuthenticationData = `-- name: UpdateAuthenticationData :exec
UPDATE authenticationData
SET hashedPassword = ?, salt = ?
WHERE uuid = ?
`

type UpdateAuthenticationDataParams struct {
	Hashedpassword string
	Salt           string
	Uuid           string
}

func (q *Queries) UpdateAuthenticationData(ctx context.Context, arg UpdateAuthenticationDataParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthenticationData, arg.Hashedpassword, arg.Salt, arg.Uuid)
	return err
}
